// Code generated by goctl. DO NOT EDIT.
// Source: content.proto

package server

import (
	"context"

	"github.com/me2seeks/echo-hub/app/content/cmd/rpc/internal/logic"
	"github.com/me2seeks/echo-hub/app/content/cmd/rpc/internal/svc"
	"github.com/me2seeks/echo-hub/app/content/cmd/rpc/pb"
)

type ContentServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedContentServer
}

func NewContentServer(svcCtx *svc.ServiceContext) *ContentServer {
	return &ContentServer{
		svcCtx: svcCtx,
	}
}

func (s *ContentServer) GetFeedsByIDByPage(ctx context.Context, in *pb.GetFeedsByIDByPageReq) (*pb.GetFeedsByIDByPageResp, error) {
	l := logic.NewGetFeedsByIDByPageLogic(ctx, s.svcCtx)
	return l.GetFeedsByIDByPage(in)
}

func (s *ContentServer) GetFollowingFeedListByPage(ctx context.Context, in *pb.GetFollowingFeedListByPageReq) (*pb.GetFollowingFeedListByPageResp, error) {
	l := logic.NewGetFollowingFeedListByPageLogic(ctx, s.svcCtx)
	return l.GetFollowingFeedListByPage(in)
}

func (s *ContentServer) GetFeedListByPage(ctx context.Context, in *pb.GetFeedListByPageReq) (*pb.GetFeedListByPageResp, error) {
	l := logic.NewGetFeedListByPageLogic(ctx, s.svcCtx)
	return l.GetFeedListByPage(in)
}

func (s *ContentServer) CreateFeed(ctx context.Context, in *pb.CreateFeedReq) (*pb.CreateFeedResp, error) {
	l := logic.NewCreateFeedLogic(ctx, s.svcCtx)
	return l.CreateFeed(in)
}

func (s *ContentServer) UpdateFeed(ctx context.Context, in *pb.UpdateFeedReq) (*pb.UpdateFeedResp, error) {
	l := logic.NewUpdateFeedLogic(ctx, s.svcCtx)
	return l.UpdateFeed(in)
}

func (s *ContentServer) DeleteFeed(ctx context.Context, in *pb.DeleteFeedReq) (*pb.DeleteFeedResp, error) {
	l := logic.NewDeleteFeedLogic(ctx, s.svcCtx)
	return l.DeleteFeed(in)
}

// comment
func (s *ContentServer) GetCommentList(ctx context.Context, in *pb.GetCommentListReq) (*pb.GetCommentListResp, error) {
	l := logic.NewGetCommentListLogic(ctx, s.svcCtx)
	return l.GetCommentList(in)
}

func (s *ContentServer) GetCommentListByPage(ctx context.Context, in *pb.GetCommentListByPageReq) (*pb.GetCommentListByPageResp, error) {
	l := logic.NewGetCommentListByPageLogic(ctx, s.svcCtx)
	return l.GetCommentListByPage(in)
}

func (s *ContentServer) CreateComment(ctx context.Context, in *pb.CreateCommentReq) (*pb.CreateCommentResp, error) {
	l := logic.NewCreateCommentLogic(ctx, s.svcCtx)
	return l.CreateComment(in)
}

func (s *ContentServer) UpdateComment(ctx context.Context, in *pb.UpdateCommentReq) (*pb.UpdateCommentResp, error) {
	l := logic.NewUpdateCommentLogic(ctx, s.svcCtx)
	return l.UpdateComment(in)
}

func (s *ContentServer) DeleteComment(ctx context.Context, in *pb.DeleteCommentReq) (*pb.DeleteCommentResp, error) {
	l := logic.NewDeleteCommentLogic(ctx, s.svcCtx)
	return l.DeleteComment(in)
}
