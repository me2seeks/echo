// Code generated by goctl. DO NOT EDIT.
// Source: content.proto

package server

import (
	"context"

	"github.com/me2seeks/echo-hub/app/content/cmd/rpc/internal/logic"
	"github.com/me2seeks/echo-hub/app/content/cmd/rpc/internal/svc"
	"github.com/me2seeks/echo-hub/app/content/cmd/rpc/pb"
)

type ContentServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedContentServer
}

func NewContentServer(svcCtx *svc.ServiceContext) *ContentServer {
	return &ContentServer{
		svcCtx: svcCtx,
	}
}

func (s *ContentServer) CreateFeed(ctx context.Context, in *pb.CreateFeedReq) (*pb.CreateFeedResp, error) {
	l := logic.NewCreateFeedLogic(ctx, s.svcCtx)
	return l.CreateFeed(in)
}

func (s *ContentServer) UpdateFeed(ctx context.Context, in *pb.UpdateFeedReq) (*pb.UpdateFeedResp, error) {
	l := logic.NewUpdateFeedLogic(ctx, s.svcCtx)
	return l.UpdateFeed(in)
}

func (s *ContentServer) DeleteFeed(ctx context.Context, in *pb.DeleteFeedReq) (*pb.DeleteFeedResp, error) {
	l := logic.NewDeleteFeedLogic(ctx, s.svcCtx)
	return l.DeleteFeed(in)
}

func (s *ContentServer) GetFeedsByID(ctx context.Context, in *pb.GetFeedsByIDReq) (*pb.GetFeedsByIDResp, error) {
	l := logic.NewGetFeedsByIDLogic(ctx, s.svcCtx)
	return l.GetFeedsByID(in)
}

func (s *ContentServer) GetFeedsByUserIDByPage(ctx context.Context, in *pb.GetFeedsByUserIDByPageReq) (*pb.GetFeedsByUserIDByPageResp, error) {
	l := logic.NewGetFeedsByUserIDByPageLogic(ctx, s.svcCtx)
	return l.GetFeedsByUserIDByPage(in)
}

func (s *ContentServer) GetFeedsByPage(ctx context.Context, in *pb.GetFeedsByPageReq) (*pb.GetFeedsByPageResp, error) {
	l := logic.NewGetFeedsByPageLogic(ctx, s.svcCtx)
	return l.GetFeedsByPage(in)
}

func (s *ContentServer) CreateComment(ctx context.Context, in *pb.CreateCommentReq) (*pb.CreateCommentResp, error) {
	l := logic.NewCreateCommentLogic(ctx, s.svcCtx)
	return l.CreateComment(in)
}

func (s *ContentServer) UpdateComment(ctx context.Context, in *pb.UpdateCommentReq) (*pb.UpdateCommentResp, error) {
	l := logic.NewUpdateCommentLogic(ctx, s.svcCtx)
	return l.UpdateComment(in)
}

func (s *ContentServer) DeleteComment(ctx context.Context, in *pb.DeleteCommentReq) (*pb.DeleteCommentResp, error) {
	l := logic.NewDeleteCommentLogic(ctx, s.svcCtx)
	return l.DeleteComment(in)
}

func (s *ContentServer) GetComments(ctx context.Context, in *pb.GetCommentsReq) (*pb.GetCommentsResp, error) {
	l := logic.NewGetCommentsLogic(ctx, s.svcCtx)
	return l.GetComments(in)
}

func (s *ContentServer) GetCommentsByPage(ctx context.Context, in *pb.GetCommentsByPageReq) (*pb.GetCommentsByPageResp, error) {
	l := logic.NewGetCommentsByPageLogic(ctx, s.svcCtx)
	return l.GetCommentsByPage(in)
}
