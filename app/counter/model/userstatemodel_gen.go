// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"time"

	"github.com/Masterminds/squirrel"
	"github.com/me2seeks/echo-hub/common/globalkey"
	"github.com/pkg/errors"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userStateFieldNames          = builder.RawFieldNames(&UserState{})
	userStateRows                = strings.Join(userStateFieldNames, ",")
	userStateRowsExpectAutoSet   = strings.Join(stringx.Remove(userStateFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userStateRowsWithPlaceHolder = strings.Join(stringx.Remove(userStateFieldNames, "`user_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheUserStateUserIdPrefix = "cache:userState:userId:"
)

type (
	userStateModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *UserState) (sql.Result, error)
		FindOne(ctx context.Context, userId int64) (*UserState, error)
		Update(ctx context.Context, session sqlx.Session, data *UserState) (sql.Result, error)
		UpdateWithVersion(ctx context.Context, session sqlx.Session, data *UserState) error
		Trans(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error
		SelectBuilder() squirrel.SelectBuilder
		DeleteSoft(ctx context.Context, session sqlx.Session, data *UserState) error
		FindSum(ctx context.Context, sumBuilder squirrel.SelectBuilder, field string) (float64, error)
		FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder, field string) (int64, error)
		FindAll(ctx context.Context, rowBuilder squirrel.SelectBuilder, orderBy string) ([]*UserState, error)
		FindPageListByPage(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*UserState, error)
		FindPageListByPageWithTotal(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*UserState, int64, error)
		FindPageListByIdDESC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMinId, pageSize int64) ([]*UserState, error)
		FindPageListByIdASC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMaxId, pageSize int64) ([]*UserState, error)
		Delete(ctx context.Context, session sqlx.Session, userId int64) error

		IncreaseFollowerCount(ctx context.Context, session sqlx.Session, userId int64) error
		DecreaseFollowerCount(ctx context.Context, session sqlx.Session, userId int64) error
		IncreaseFollowingCount(ctx context.Context, session sqlx.Session, userId int64) error
		DecreaseFollowingCount(ctx context.Context, session sqlx.Session, userId int64) error
		IncreaseFeedCount(ctx context.Context, session sqlx.Session, userId int64) error
	}

	defaultUserStateModel struct {
		sqlc.CachedConn
		table string
	}

	UserState struct {
		UserId         int64     `db:"user_id"`
		FollowingCount int64     `db:"following_count"` // 关注数
		FollowerCount  int64     `db:"follower_count"`  // 粉丝数
		FeedCount      int64     `db:"feed_count"`      // 动态数
		CreateAt       time.Time `db:"create_at"`
		UpdateAt       time.Time `db:"update_at"`
		DeleteAt       time.Time `db:"delete_at"`
		DelState       int64     `db:"del_state"`
		Version        uint64    `db:"version"` // 版本号
	}
)

func newUserStateModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserStateModel {
	return &defaultUserStateModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user_state`",
	}
}

func (m *defaultUserStateModel) Delete(ctx context.Context, session sqlx.Session, userId int64) error {
	userStateUserIdKey := fmt.Sprintf("%s%v", cacheUserStateUserIdPrefix, userId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `user_id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, userId)
		}
		return conn.ExecCtx(ctx, query, userId)
	}, userStateUserIdKey)
	return err
}
func (m *defaultUserStateModel) FindOne(ctx context.Context, userId int64) (*UserState, error) {
	userStateUserIdKey := fmt.Sprintf("%s%v", cacheUserStateUserIdPrefix, userId)
	var resp UserState
	err := m.QueryRowCtx(ctx, &resp, userStateUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? and del_state = ? limit 1", userStateRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, userId, globalkey.DelStateNo)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserStateModel) Insert(ctx context.Context, session sqlx.Session, data *UserState) (sql.Result, error) {
	data.DeleteAt = time.Unix(0, 0)
	data.DelState = globalkey.DelStateNo
	userStateUserIdKey := fmt.Sprintf("%s%v", cacheUserStateUserIdPrefix, data.UserId)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, userStateRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.UserId, data.FollowingCount, data.FollowerCount, data.FeedCount, data.DeleteAt, data.DelState, data.Version)
		}
		return conn.ExecCtx(ctx, query, data.UserId, data.FollowingCount, data.FollowerCount, data.FeedCount, data.DeleteAt, data.DelState, data.Version)
	}, userStateUserIdKey)
}

func (m *defaultUserStateModel) Update(ctx context.Context, session sqlx.Session, data *UserState) (sql.Result, error) {
	userStateUserIdKey := fmt.Sprintf("%s%v", cacheUserStateUserIdPrefix, data.UserId)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `user_id` = ?", m.table, userStateRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.FollowingCount, data.FollowerCount, data.FeedCount, data.DeleteAt, data.DelState, data.Version, data.UserId)
		}
		return conn.ExecCtx(ctx, query, data.FollowingCount, data.FollowerCount, data.FeedCount, data.DeleteAt, data.DelState, data.Version, data.UserId)
	}, userStateUserIdKey)
}

func (m *defaultUserStateModel) UpdateWithVersion(ctx context.Context, session sqlx.Session, data *UserState) error {

	oldVersion := data.Version
	data.Version += 1

	var sqlResult sql.Result
	var err error

	userStateUserIdKey := fmt.Sprintf("%s%v", cacheUserStateUserIdPrefix, data.UserId)
	sqlResult, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `user_id` = ? and version = ? ", m.table, userStateRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.FollowingCount, data.FollowerCount, data.FeedCount, data.DeleteAt, data.DelState, data.Version, data.UserId, oldVersion)
		}
		return conn.ExecCtx(ctx, query, data.FollowingCount, data.FollowerCount, data.FeedCount, data.DeleteAt, data.DelState, data.Version, data.UserId, oldVersion)
	}, userStateUserIdKey)
	if err != nil {
		return err
	}
	updateCount, err := sqlResult.RowsAffected()
	if err != nil {
		return err
	}
	if updateCount == 0 {
		return ErrNoRowsUpdate
	}

	return nil
}

func (m *defaultUserStateModel) DeleteSoft(ctx context.Context, session sqlx.Session, data *UserState) error {
	data.DelState = globalkey.DelStateYes
	data.DeleteAt = time.Now()
	if err := m.UpdateWithVersion(ctx, session, data); err != nil {
		return errors.Wrapf(errors.New("delete soft failed "), "UserStateModel delete err : %+v", err)
	}
	return nil
}

func (m *defaultUserStateModel) FindSum(ctx context.Context, builder squirrel.SelectBuilder, field string) (float64, error) {

	if len(field) == 0 {
		return 0, errors.Wrapf(errors.New("FindSum Least One Field"), "FindSum Least One Field")
	}

	builder = builder.Columns("IFNULL(SUM(" + field + "),0)")

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).ToSql()
	if err != nil {
		return 0, err
	}

	var resp float64
	err = m.QueryRowNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return 0, err
	}
}

func (m *defaultUserStateModel) FindCount(ctx context.Context, builder squirrel.SelectBuilder, field string) (int64, error) {

	if len(field) == 0 {
		return 0, errors.Wrapf(errors.New("FindCount Least One Field"), "FindCount Least One Field")
	}

	builder = builder.Columns("COUNT(" + field + ")")

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).ToSql()
	if err != nil {
		return 0, err
	}

	var resp int64
	err = m.QueryRowNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return 0, err
	}
}

func (m *defaultUserStateModel) FindAll(ctx context.Context, builder squirrel.SelectBuilder, orderBy string) ([]*UserState, error) {

	builder = builder.Columns(userStateRows)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*UserState
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultUserStateModel) FindPageListByPage(ctx context.Context, builder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*UserState, error) {

	builder = builder.Columns(userStateRows)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*UserState
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultUserStateModel) FindPageListByPageWithTotal(ctx context.Context, builder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*UserState, int64, error) {

	total, err := m.FindCount(ctx, builder, "id")
	if err != nil {
		return nil, 0, err
	}

	builder = builder.Columns(userStateRows)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, total, err
	}

	var resp []*UserState
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, total, nil
	default:
		return nil, total, err
	}
}

func (m *defaultUserStateModel) FindPageListByIdDESC(ctx context.Context, builder squirrel.SelectBuilder, preMinId, pageSize int64) ([]*UserState, error) {

	builder = builder.Columns(userStateRows)

	if preMinId > 0 {
		builder = builder.Where(" id < ? ", preMinId)
	}

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).OrderBy("id DESC").Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*UserState
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultUserStateModel) FindPageListByIdASC(ctx context.Context, builder squirrel.SelectBuilder, preMaxId, pageSize int64) ([]*UserState, error) {

	builder = builder.Columns(userStateRows)

	if preMaxId > 0 {
		builder = builder.Where(" id > ? ", preMaxId)
	}

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).OrderBy("id ASC").Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*UserState
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultUserStateModel) Trans(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error {

	return m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})

}

func (m *defaultUserStateModel) SelectBuilder() squirrel.SelectBuilder {
	return squirrel.Select().From(m.table)
}
func (m *defaultUserStateModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheUserStateUserIdPrefix, primary)
}
func (m *defaultUserStateModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? and del_state = ? limit 1", userStateRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary, globalkey.DelStateNo)
}

func (m *defaultUserStateModel) tableName() string {
	return m.table
}

func (m *defaultUserStateModel) IncreaseFollowerCount(ctx context.Context, session sqlx.Session, userId int64) error {
	userState, err := m.FindOne(ctx, userId)
	if err != nil {
		if err == ErrNotFound {
			userState = &UserState{
				UserId:         userId,
				FollowerCount:  1,
				FollowingCount: 0,
			}
			_, err = m.Insert(ctx, session, userState)
			if err != nil {
				return err
			}
			return nil
		}
		return err
	}

	userState.FollowerCount += 1
	err = m.UpdateWithVersion(ctx, session, userState)
	if err != nil {
		return err
	}
	return nil
}

func (m *defaultUserStateModel) DecreaseFollowerCount(ctx context.Context, session sqlx.Session, userId int64) error {
	userState, err := m.FindOne(ctx, userId)
	if err != nil {
		return err
	}
	userState.FollowerCount -= 1
	err = m.UpdateWithVersion(ctx, session, userState)
	if err != nil {
		return err
	}
	return nil
}

func (m *defaultUserStateModel) IncreaseFollowingCount(ctx context.Context, session sqlx.Session, userId int64) error {
	userState, err := m.FindOne(ctx, userId)
	if err != nil {
		if err == ErrNotFound {
			userState = &UserState{
				UserId:         userId,
				FollowerCount:  0,
				FollowingCount: 1,
			}
			_, err = m.Insert(ctx, session, userState)
			if err != nil {
				return err
			}
			return nil
		}
		return err
	}

	userState.FollowingCount += 1
	err = m.UpdateWithVersion(ctx, session, userState)
	if err != nil {
		return err
	}
	return nil
}

func (m *defaultUserStateModel) DecreaseFollowingCount(ctx context.Context, session sqlx.Session, userId int64) error {
	userState, err := m.FindOne(ctx, userId)
	if err != nil {
		return err
	}
	userState.FollowingCount -= 1
	err = m.UpdateWithVersion(ctx, session, userState)
	if err != nil {
		return err
	}
	return nil
}

func (m *defaultUserStateModel) IncreaseFeedCount(ctx context.Context, session sqlx.Session, userId int64) error {
	userState, err := m.FindOne(ctx, userId)
	if err != nil {
		if err == ErrNotFound {
			userState = &UserState{
				UserId:         userId,
				FeedCount:      1,
			}
			_, err = m.Insert(ctx, session, userState)
			if err != nil {
				return err
			}
			return nil
		}
		return err
	}

	userState.FeedCount += 1
	err = m.UpdateWithVersion(ctx, session, userState)
	if err != nil {
		return err
	}
	return nil
}
