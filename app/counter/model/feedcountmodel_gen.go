// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"time"

	"github.com/Masterminds/squirrel"
	"github.com/me2seeks/echo-hub/common/globalkey"
	"github.com/pkg/errors"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	feedCountFieldNames          = builder.RawFieldNames(&FeedCount{})
	feedCountRows                = strings.Join(feedCountFieldNames, ",")
	feedCountRowsExpectAutoSet   = strings.Join(stringx.Remove(feedCountFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	feedCountRowsWithPlaceHolder = strings.Join(stringx.Remove(feedCountFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheFeedCountIdPrefix = "cache:feedCount:id:"
)

type (
	feedCountModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *FeedCount) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*FeedCount, error)
		Update(ctx context.Context, session sqlx.Session, data *FeedCount) (sql.Result, error)
		UpdateWithVersion(ctx context.Context, session sqlx.Session, data *FeedCount) error
		Trans(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error
		SelectBuilder() squirrel.SelectBuilder
		DeleteSoft(ctx context.Context, session sqlx.Session, data *FeedCount) error
		FindSum(ctx context.Context, sumBuilder squirrel.SelectBuilder, field string) (float64, error)
		FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder, field string) (int64, error)
		FindAll(ctx context.Context, rowBuilder squirrel.SelectBuilder, orderBy string) ([]*FeedCount, error)
		FindPageListByPage(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*FeedCount, error)
		FindPageListByPageWithTotal(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*FeedCount, int64, error)
		FindPageListByIdDESC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMinId, pageSize int64) ([]*FeedCount, error)
		FindPageListByIdASC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMaxId, pageSize int64) ([]*FeedCount, error)
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultFeedCountModel struct {
		sqlc.CachedConn
		table string
	}

	FeedCount struct {
		Id           int64         `db:"id"`
		FeedId       sql.NullInt64 `db:"feed_id"`
		CommentCount sql.NullInt64 `db:"comment_count"`
		ViewCount    sql.NullInt64 `db:"view_count"`
		LikeCount    sql.NullInt64 `db:"like_count"`
		RepostCount  sql.NullInt64 `db:"repost_count"`
		CreateAt     time.Time     `db:"create_at"`
		UpdateAt     time.Time     `db:"update_at"`
		DeleteAt     time.Time     `db:"delete_at"`
		DelState     int64         `db:"del_state"`
		Version      uint64        `db:"version"` // 版本号
	}
)

func newFeedCountModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultFeedCountModel {
	return &defaultFeedCountModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`feed_count`",
	}
}

func (m *defaultFeedCountModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	feedCountIdKey := fmt.Sprintf("%s%v", cacheFeedCountIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, feedCountIdKey)
	return err
}
func (m *defaultFeedCountModel) FindOne(ctx context.Context, id int64) (*FeedCount, error) {
	feedCountIdKey := fmt.Sprintf("%s%v", cacheFeedCountIdPrefix, id)
	var resp FeedCount
	err := m.QueryRowCtx(ctx, &resp, feedCountIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? and del_state = ? limit 1", feedCountRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id, globalkey.DelStateNo)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFeedCountModel) Insert(ctx context.Context, session sqlx.Session, data *FeedCount) (sql.Result, error) {
	data.DeleteAt = time.Unix(0, 0)
	data.DelState = globalkey.DelStateNo
	feedCountIdKey := fmt.Sprintf("%s%v", cacheFeedCountIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, feedCountRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.FeedId, data.CommentCount, data.ViewCount, data.LikeCount, data.RepostCount, data.DeleteAt, data.DelState, data.Version)
		}
		return conn.ExecCtx(ctx, query, data.FeedId, data.CommentCount, data.ViewCount, data.LikeCount, data.RepostCount, data.DeleteAt, data.DelState, data.Version)
	}, feedCountIdKey)
}

func (m *defaultFeedCountModel) Update(ctx context.Context, session sqlx.Session, data *FeedCount) (sql.Result, error) {
	feedCountIdKey := fmt.Sprintf("%s%v", cacheFeedCountIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, feedCountRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.FeedId, data.CommentCount, data.ViewCount, data.LikeCount, data.RepostCount, data.DeleteAt, data.DelState, data.Version, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.FeedId, data.CommentCount, data.ViewCount, data.LikeCount, data.RepostCount, data.DeleteAt, data.DelState, data.Version, data.Id)
	}, feedCountIdKey)
}

func (m *defaultFeedCountModel) UpdateWithVersion(ctx context.Context, session sqlx.Session, data *FeedCount) error {

	oldVersion := data.Version
	data.Version += 1

	var sqlResult sql.Result
	var err error

	feedCountIdKey := fmt.Sprintf("%s%v", cacheFeedCountIdPrefix, data.Id)
	sqlResult, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ? and version = ? ", m.table, feedCountRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.FeedId, data.CommentCount, data.ViewCount, data.LikeCount, data.RepostCount, data.DeleteAt, data.DelState, data.Version, data.Id, oldVersion)
		}
		return conn.ExecCtx(ctx, query, data.FeedId, data.CommentCount, data.ViewCount, data.LikeCount, data.RepostCount, data.DeleteAt, data.DelState, data.Version, data.Id, oldVersion)
	}, feedCountIdKey)
	if err != nil {
		return err
	}
	updateCount, err := sqlResult.RowsAffected()
	if err != nil {
		return err
	}
	if updateCount == 0 {
		return ErrNoRowsUpdate
	}

	return nil
}

func (m *defaultFeedCountModel) DeleteSoft(ctx context.Context, session sqlx.Session, data *FeedCount) error {
	data.DelState = globalkey.DelStateYes
	data.DeleteAt = time.Now()
	if err := m.UpdateWithVersion(ctx, session, data); err != nil {
		return errors.Wrapf(errors.New("delete soft failed "), "FeedCountModel delete err : %+v", err)
	}
	return nil
}

func (m *defaultFeedCountModel) FindSum(ctx context.Context, builder squirrel.SelectBuilder, field string) (float64, error) {

	if len(field) == 0 {
		return 0, errors.Wrapf(errors.New("FindSum Least One Field"), "FindSum Least One Field")
	}

	builder = builder.Columns("IFNULL(SUM(" + field + "),0)")

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).ToSql()
	if err != nil {
		return 0, err
	}

	var resp float64
	err = m.QueryRowNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return 0, err
	}
}

func (m *defaultFeedCountModel) FindCount(ctx context.Context, builder squirrel.SelectBuilder, field string) (int64, error) {

	if len(field) == 0 {
		return 0, errors.Wrapf(errors.New("FindCount Least One Field"), "FindCount Least One Field")
	}

	builder = builder.Columns("COUNT(" + field + ")")

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).ToSql()
	if err != nil {
		return 0, err
	}

	var resp int64
	err = m.QueryRowNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return 0, err
	}
}

func (m *defaultFeedCountModel) FindAll(ctx context.Context, builder squirrel.SelectBuilder, orderBy string) ([]*FeedCount, error) {

	builder = builder.Columns(feedCountRows)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*FeedCount
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultFeedCountModel) FindPageListByPage(ctx context.Context, builder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*FeedCount, error) {

	builder = builder.Columns(feedCountRows)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*FeedCount
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultFeedCountModel) FindPageListByPageWithTotal(ctx context.Context, builder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*FeedCount, int64, error) {

	total, err := m.FindCount(ctx, builder, "id")
	if err != nil {
		return nil, 0, err
	}

	builder = builder.Columns(feedCountRows)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, total, err
	}

	var resp []*FeedCount
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, total, nil
	default:
		return nil, total, err
	}
}

func (m *defaultFeedCountModel) FindPageListByIdDESC(ctx context.Context, builder squirrel.SelectBuilder, preMinId, pageSize int64) ([]*FeedCount, error) {

	builder = builder.Columns(feedCountRows)

	if preMinId > 0 {
		builder = builder.Where(" id < ? ", preMinId)
	}

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).OrderBy("id DESC").Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*FeedCount
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultFeedCountModel) FindPageListByIdASC(ctx context.Context, builder squirrel.SelectBuilder, preMaxId, pageSize int64) ([]*FeedCount, error) {

	builder = builder.Columns(feedCountRows)

	if preMaxId > 0 {
		builder = builder.Where(" id > ? ", preMaxId)
	}

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).OrderBy("id ASC").Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*FeedCount
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultFeedCountModel) Trans(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error {

	return m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})

}

func (m *defaultFeedCountModel) SelectBuilder() squirrel.SelectBuilder {
	return squirrel.Select().From(m.table)
}
func (m *defaultFeedCountModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheFeedCountIdPrefix, primary)
}
func (m *defaultFeedCountModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? and del_state = ? limit 1", feedCountRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary, globalkey.DelStateNo)
}

func (m *defaultFeedCountModel) tableName() string {
	return m.table
}
