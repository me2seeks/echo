// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"time"

	"github.com/Masterminds/squirrel"
	"github.com/me2seeks/echo-hub/common/globalkey"
	"github.com/pkg/errors"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userRelationFieldNames          = builder.RawFieldNames(&UserRelation{})
	userRelationRows                = strings.Join(userRelationFieldNames, ",")
	userRelationRowsExpectAutoSet   = strings.Join(stringx.Remove(userRelationFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userRelationRowsWithPlaceHolder = strings.Join(stringx.Remove(userRelationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheUserRelationIdPrefix                   = "cache:userRelation:id:"
	cacheUserRelationFollowerIdFolloweeIdPrefix = "cache:userRelation:followerId:followeeId:"
)

type (
	userRelationModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *UserRelation) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserRelation, error)
		FindOneByFollowerIdFolloweeId(ctx context.Context, followerId int64, followeeId int64) (*UserRelation, error)
		Update(ctx context.Context, session sqlx.Session, data *UserRelation) (sql.Result, error)
		UpdateWithVersion(ctx context.Context, session sqlx.Session, data *UserRelation) error
		Trans(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error
		SelectBuilder() squirrel.SelectBuilder
		DeleteSoft(ctx context.Context, session sqlx.Session, data *UserRelation) error
		FindSum(ctx context.Context, sumBuilder squirrel.SelectBuilder, field string) (float64, error)
		FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder, field string) (int64, error)
		FindAll(ctx context.Context, rowBuilder squirrel.SelectBuilder, orderBy string) ([]*UserRelation, error)
		FindPageListByPage(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*UserRelation, error)
		FindPageListByPageWithTotal(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*UserRelation, int64, error)
		FindPageListByIdDESC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMinId, pageSize int64) ([]*UserRelation, error)
		FindPageListByIdASC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMaxId, pageSize int64) ([]*UserRelation, error)
		Delete(ctx context.Context, session sqlx.Session, id int64) error

		FindFollowers(ctx context.Context, followerId int64) ([]int64, error)
		FindFollowees(ctx context.Context, followeeId int64) ([]int64, error)
		RestoreSoft(ctx context.Context, session sqlx.Session, followerId, followeeId int64) error
	}

	defaultUserRelationModel struct {
		sqlc.CachedConn
		table string
	}

	UserRelation struct {
		Id         int64     `db:"id"`
		FollowerId int64     `db:"follower_id"` // 关注者的用户ID
		FolloweeId int64     `db:"followee_id"` // 被关注者的用户ID
		CreateAt   time.Time `db:"create_at"`
		DeleteAt   time.Time `db:"delete_at"`
		DelState   int64     `db:"del_state"`
		Version    uint64    `db:"version"` // 版本号
	}
)

func newUserRelationModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserRelationModel {
	return &defaultUserRelationModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user_relation`",
	}
}

func (m *defaultUserRelationModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	userRelationFollowerIdFolloweeIdKey := fmt.Sprintf("%s%v:%v", cacheUserRelationFollowerIdFolloweeIdPrefix, data.FollowerId, data.FolloweeId)
	userRelationIdKey := fmt.Sprintf("%s%v", cacheUserRelationIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, userRelationFollowerIdFolloweeIdKey, userRelationIdKey)
	return err
}
func (m *defaultUserRelationModel) FindOne(ctx context.Context, id int64) (*UserRelation, error) {
	userRelationIdKey := fmt.Sprintf("%s%v", cacheUserRelationIdPrefix, id)
	var resp UserRelation
	err := m.QueryRowCtx(ctx, &resp, userRelationIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? and del_state = ? limit 1", userRelationRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id, globalkey.DelStateNo)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserRelationModel) FindOneByFollowerIdFolloweeId(ctx context.Context, followerId int64, followeeId int64) (*UserRelation, error) {
	userRelationFollowerIdFolloweeIdKey := fmt.Sprintf("%s%v:%v", cacheUserRelationFollowerIdFolloweeIdPrefix, followerId, followeeId)
	var resp UserRelation
	err := m.QueryRowIndexCtx(ctx, &resp, userRelationFollowerIdFolloweeIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `follower_id` = ? and `followee_id` = ? and del_state = ? limit 1", userRelationRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, followerId, followeeId, globalkey.DelStateNo); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserRelationModel) Insert(ctx context.Context, session sqlx.Session, data *UserRelation) (sql.Result, error) {
	data.DeleteAt = time.Unix(0, 0)
	data.DelState = globalkey.DelStateNo
	userRelationFollowerIdFolloweeIdKey := fmt.Sprintf("%s%v:%v", cacheUserRelationFollowerIdFolloweeIdPrefix, data.FollowerId, data.FolloweeId)
	userRelationIdKey := fmt.Sprintf("%s%v", cacheUserRelationIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, userRelationRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Id, data.FollowerId, data.FolloweeId, data.DeleteAt, data.DelState, data.Version)
		}
		return conn.ExecCtx(ctx, query, data.Id, data.FollowerId, data.FolloweeId, data.DeleteAt, data.DelState, data.Version)
	}, userRelationFollowerIdFolloweeIdKey, userRelationIdKey)
}

func (m *defaultUserRelationModel) Update(ctx context.Context, session sqlx.Session, newData *UserRelation) (sql.Result, error) {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return nil, err
	}
	userRelationFollowerIdFolloweeIdKey := fmt.Sprintf("%s%v:%v", cacheUserRelationFollowerIdFolloweeIdPrefix, data.FollowerId, data.FolloweeId)
	userRelationIdKey := fmt.Sprintf("%s%v", cacheUserRelationIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRelationRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, newData.FollowerId, newData.FolloweeId, newData.DeleteAt, newData.DelState, newData.Version, newData.Id)
		}
		return conn.ExecCtx(ctx, query, newData.FollowerId, newData.FolloweeId, newData.DeleteAt, newData.DelState, newData.Version, newData.Id)
	}, userRelationFollowerIdFolloweeIdKey, userRelationIdKey)
}

func (m *defaultUserRelationModel) UpdateWithVersion(ctx context.Context, session sqlx.Session, newData *UserRelation) error {

	oldVersion := newData.Version
	newData.Version += 1

	var sqlResult sql.Result
	var err error

	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}
	userRelationFollowerIdFolloweeIdKey := fmt.Sprintf("%s%v:%v", cacheUserRelationFollowerIdFolloweeIdPrefix, data.FollowerId, data.FolloweeId)
	userRelationIdKey := fmt.Sprintf("%s%v", cacheUserRelationIdPrefix, data.Id)
	sqlResult, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ? and version = ? ", m.table, userRelationRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, newData.FollowerId, newData.FolloweeId, newData.DeleteAt, newData.DelState, newData.Version, newData.Id, oldVersion)
		}
		return conn.ExecCtx(ctx, query, newData.FollowerId, newData.FolloweeId, newData.DeleteAt, newData.DelState, newData.Version, newData.Id, oldVersion)
	}, userRelationFollowerIdFolloweeIdKey, userRelationIdKey)
	if err != nil {
		return err
	}
	updateCount, err := sqlResult.RowsAffected()
	if err != nil {
		return err
	}
	if updateCount == 0 {
		return ErrNoRowsUpdate
	}

	return nil
}

func (m *defaultUserRelationModel) DeleteSoft(ctx context.Context, session sqlx.Session, data *UserRelation) error {
	data.DelState = globalkey.DelStateYes
	data.DeleteAt = time.Now()
	if err := m.UpdateWithVersion(ctx, session, data); err != nil {
		return errors.Wrapf(errors.New("delete soft failed "), "UserRelationModel delete err : %+v", err)
	}
	return nil
}

func (m *defaultUserRelationModel) FindSum(ctx context.Context, builder squirrel.SelectBuilder, field string) (float64, error) {

	if len(field) == 0 {
		return 0, errors.Wrapf(errors.New("FindSum Least One Field"), "FindSum Least One Field")
	}

	builder = builder.Columns("IFNULL(SUM(" + field + "),0)")

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).ToSql()
	if err != nil {
		return 0, err
	}

	var resp float64
	err = m.QueryRowNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return 0, err
	}
}

func (m *defaultUserRelationModel) FindCount(ctx context.Context, builder squirrel.SelectBuilder, field string) (int64, error) {

	if len(field) == 0 {
		return 0, errors.Wrapf(errors.New("FindCount Least One Field"), "FindCount Least One Field")
	}

	builder = builder.Columns("COUNT(" + field + ")")

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).ToSql()
	if err != nil {
		return 0, err
	}

	var resp int64
	err = m.QueryRowNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return 0, err
	}
}

func (m *defaultUserRelationModel) FindAll(ctx context.Context, builder squirrel.SelectBuilder, orderBy string) ([]*UserRelation, error) {

	builder = builder.Columns(userRelationRows)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*UserRelation
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultUserRelationModel) FindFollowers(ctx context.Context, followeeId int64) ([]int64, error) {
	query, values, err := squirrel.Select("follower_id").From(m.table).Where("followee_id = ?", followeeId).Where("del_state = ?", globalkey.DelStateNo).ToSql()
	if err != nil {
		return nil, err
	}
	var resp []int64
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultUserRelationModel) FindFollowees(ctx context.Context, followerId int64) ([]int64, error) {
	query, values, err := squirrel.Select("followee_id").From(m.table).Where("follower_id = ?", followerId).Where("del_state = ?", globalkey.DelStateNo).ToSql()
	if err != nil {
		return nil, err
	}
	var resp []int64
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultUserRelationModel) RestoreSoft(ctx context.Context, session sqlx.Session, followerId, followeeId int64) error {
	builder := squirrel.Update(m.table).Set("del_state", globalkey.DelStateNo).Set("delete_at", time.Unix(0, 0)).Where("follower_id = ?", followerId).Where("followee_id = ?", followeeId)
	query, values, err := builder.ToSql()
	if err != nil {
		return err
	}
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		if session != nil {
			return session.ExecCtx(ctx, query, values...)
		}
		return conn.ExecCtx(ctx, query, values...)
	})
	return err
}

func (m *defaultUserRelationModel) FindPageListByPage(ctx context.Context, builder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*UserRelation, error) {

	builder = builder.Columns(userRelationRows)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*UserRelation
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultUserRelationModel) FindPageListByPageWithTotal(ctx context.Context, builder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*UserRelation, int64, error) {

	total, err := m.FindCount(ctx, builder, "id")
	if err != nil {
		return nil, 0, err
	}

	builder = builder.Columns(userRelationRows)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, total, err
	}

	var resp []*UserRelation
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, total, nil
	default:
		return nil, total, err
	}
}

func (m *defaultUserRelationModel) FindPageListByIdDESC(ctx context.Context, builder squirrel.SelectBuilder, preMinId, pageSize int64) ([]*UserRelation, error) {

	builder = builder.Columns(userRelationRows)

	if preMinId > 0 {
		builder = builder.Where(" id < ? ", preMinId)
	}

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).OrderBy("id DESC").Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*UserRelation
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultUserRelationModel) FindPageListByIdASC(ctx context.Context, builder squirrel.SelectBuilder, preMaxId, pageSize int64) ([]*UserRelation, error) {

	builder = builder.Columns(userRelationRows)

	if preMaxId > 0 {
		builder = builder.Where(" id > ? ", preMaxId)
	}

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).OrderBy("id ASC").Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*UserRelation
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultUserRelationModel) Trans(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error {

	return m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})

}

func (m *defaultUserRelationModel) SelectBuilder() squirrel.SelectBuilder {
	return squirrel.Select().From(m.table)
}
func (m *defaultUserRelationModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheUserRelationIdPrefix, primary)
}
func (m *defaultUserRelationModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? and del_state = ? limit 1", userRelationRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary, globalkey.DelStateNo)
}

func (m *defaultUserRelationModel) tableName() string {
	return m.table
}
