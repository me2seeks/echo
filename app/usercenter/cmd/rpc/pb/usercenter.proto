syntax = "proto3";

option go_package = "./pb";

package pb;


//model
message User {
    int64 id = 1;
    string email = 2;
    string nickname =3;
    string handel = 4;
    int32  sex = 5;
    string avatar = 6;
    string bio = 7;
}

message UserAuth {
    int64  id = 1;
    int64  userId = 2;
    string authType = 3;
    string authKey = 4;
}


//req „ÄÅresp
message RegisterReq {
    string email = 1;
    string handle = 2;
    string nickname = 3;
    string password = 4;
    string authKey = 5;
    string authType = 6;
}
message RegisterResp {
    string accessToken = 1;
    int64  accessExpire = 2;
    int64  refreshAfter = 3;
}

message LoginReq {
    string  authType = 1;
    string authKey = 2;
    string  password = 3;
}
message LoginResp {
    string accessToken = 1;
    int64  accessExpire = 2;
    int64  refreshAfter = 3;
}

message GetUserInfoReq {
    int64  userId = 1;
}
message GetUserInfoResp {
    User user = 1;
}

message GetUserAuthByAuthKeyReq {
    string  authKey = 1;
    string  authType = 2;
}
message GetUserAuthByAuthKeyResp {
    UserAuth userAuth = 1;
}

message GetUserAuthByUserIDReq {
    int64  userID = 1;
    string  authType = 2;
}
message GetUserAuthyUserIDResp {
    UserAuth userAuth = 1;
}

message GenerateTokenReq {
    int64 userId = 1;
}
message GenerateTokenResp {
    string accessToken = 1;
    int64  accessExpire = 2;
    int64  refreshAfter = 3;
}

message UpdateUserInfoReq {
    int64 userId = 1;
    string nickname = 2;
    int32 sex = 3;
    string avatar = 4;
    string bio = 5;
    }
message UpdateUserInfoResp {
}

message FollowReq {
    int64 userId = 1;
    int64 FolloweeId = 2;
}
message FollowResp {
}

message UnfollowReq {
    int64 userId = 1;
    int64 FolloweeId = 2;
}
message UnfollowResp {
}

message FollowersReq {
    int64 userId = 1;
}
message FollowersResp {
    repeated int64 followers = 1;
}

message FollowingReq {
    int64 userId = 1;
}
message FollowingResp {
    repeated int64 following = 1;
}

//service
service usercenter {
    //user

    rpc login(LoginReq) returns(LoginResp);
    rpc register(RegisterReq) returns(RegisterResp);
    rpc getUserInfo(GetUserInfoReq) returns(GetUserInfoResp);
    rpc getUserAuthByAuthKey(GetUserAuthByAuthKeyReq) returns(GetUserAuthByAuthKeyResp);
    rpc getUserAuthByUserID(GetUserAuthByUserIDReq) returns(GetUserAuthyUserIDResp);
    rpc generateToken(GenerateTokenReq) returns(GenerateTokenResp);
    rpc updateUserInfo(UpdateUserInfoReq) returns(UpdateUserInfoResp);

    //relation

    rpc follow(FollowReq) returns(FollowResp);
    rpc unfollow(UnfollowReq) returns(UnfollowResp);
    rpc followers(FollowersReq) returns(FollowersResp);
    rpc following(FollowingReq) returns(FollowingResp);

}