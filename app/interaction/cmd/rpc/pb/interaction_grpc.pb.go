// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: interaction.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Interaction_Follow_FullMethodName    = "/pb.interaction/follow"
	Interaction_Unfollow_FullMethodName  = "/pb.interaction/unfollow"
	Interaction_Followers_FullMethodName = "/pb.interaction/followers"
	Interaction_Following_FullMethodName = "/pb.interaction/following"
)

// InteractionClient is the client API for Interaction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InteractionClient interface {
	Follow(ctx context.Context, in *FollowReq, opts ...grpc.CallOption) (*FollowResp, error)
	Unfollow(ctx context.Context, in *UnfollowReq, opts ...grpc.CallOption) (*UnfollowResp, error)
	Followers(ctx context.Context, in *FollowersReq, opts ...grpc.CallOption) (*FollowersResp, error)
	Following(ctx context.Context, in *FollowingReq, opts ...grpc.CallOption) (*FollowingResp, error)
}

type interactionClient struct {
	cc grpc.ClientConnInterface
}

func NewInteractionClient(cc grpc.ClientConnInterface) InteractionClient {
	return &interactionClient{cc}
}

func (c *interactionClient) Follow(ctx context.Context, in *FollowReq, opts ...grpc.CallOption) (*FollowResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FollowResp)
	err := c.cc.Invoke(ctx, Interaction_Follow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionClient) Unfollow(ctx context.Context, in *UnfollowReq, opts ...grpc.CallOption) (*UnfollowResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnfollowResp)
	err := c.cc.Invoke(ctx, Interaction_Unfollow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionClient) Followers(ctx context.Context, in *FollowersReq, opts ...grpc.CallOption) (*FollowersResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FollowersResp)
	err := c.cc.Invoke(ctx, Interaction_Followers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionClient) Following(ctx context.Context, in *FollowingReq, opts ...grpc.CallOption) (*FollowingResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FollowingResp)
	err := c.cc.Invoke(ctx, Interaction_Following_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InteractionServer is the server API for Interaction service.
// All implementations must embed UnimplementedInteractionServer
// for forward compatibility.
type InteractionServer interface {
	Follow(context.Context, *FollowReq) (*FollowResp, error)
	Unfollow(context.Context, *UnfollowReq) (*UnfollowResp, error)
	Followers(context.Context, *FollowersReq) (*FollowersResp, error)
	Following(context.Context, *FollowingReq) (*FollowingResp, error)
	mustEmbedUnimplementedInteractionServer()
}

// UnimplementedInteractionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInteractionServer struct{}

func (UnimplementedInteractionServer) Follow(context.Context, *FollowReq) (*FollowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (UnimplementedInteractionServer) Unfollow(context.Context, *UnfollowReq) (*UnfollowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unfollow not implemented")
}
func (UnimplementedInteractionServer) Followers(context.Context, *FollowersReq) (*FollowersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Followers not implemented")
}
func (UnimplementedInteractionServer) Following(context.Context, *FollowingReq) (*FollowingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Following not implemented")
}
func (UnimplementedInteractionServer) mustEmbedUnimplementedInteractionServer() {}
func (UnimplementedInteractionServer) testEmbeddedByValue()                     {}

// UnsafeInteractionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InteractionServer will
// result in compilation errors.
type UnsafeInteractionServer interface {
	mustEmbedUnimplementedInteractionServer()
}

func RegisterInteractionServer(s grpc.ServiceRegistrar, srv InteractionServer) {
	// If the following call pancis, it indicates UnimplementedInteractionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Interaction_ServiceDesc, srv)
}

func _Interaction_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interaction_Follow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServer).Follow(ctx, req.(*FollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interaction_Unfollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnfollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServer).Unfollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interaction_Unfollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServer).Unfollow(ctx, req.(*UnfollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interaction_Followers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServer).Followers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interaction_Followers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServer).Followers(ctx, req.(*FollowersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interaction_Following_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServer).Following(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interaction_Following_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServer).Following(ctx, req.(*FollowingReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Interaction_ServiceDesc is the grpc.ServiceDesc for Interaction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Interaction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.interaction",
	HandlerType: (*InteractionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "follow",
			Handler:    _Interaction_Follow_Handler,
		},
		{
			MethodName: "unfollow",
			Handler:    _Interaction_Unfollow_Handler,
		},
		{
			MethodName: "followers",
			Handler:    _Interaction_Followers_Handler,
		},
		{
			MethodName: "following",
			Handler:    _Interaction_Following_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interaction.proto",
}
